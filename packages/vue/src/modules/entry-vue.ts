import type { AppOptions, Vixt, VixtConfigLayer } from '@vixt/core'

import path from 'pathe'
import fs from 'fs-extra'
import { defineVixtModule, resolveLayersDirs } from '@vixt/core'

function resolveLayersPlugins(layers: VixtConfigLayer[], from: string) {
  const { plugins = [] } = resolveLayersDirs(layers)
  return plugins.map((pluginPath) => {
    let pluginsDir = path.relative(from, pluginPath)
    if (!pluginPath.startsWith('.') && !pluginPath.startsWith('/')) {
      pluginsDir = `./${pluginsDir}`
    }
    return `${pluginsDir}/*.ts`
  })
}

function generateMainTs(options: AppOptions, vixt: Vixt) {
  const { buildDir, rootDir } = vixt.options
  const { rootId, baseURL } = options
  const layersPluginsPath = resolveLayersPlugins(vixt._layers, path.join(rootDir!, buildDir!))
  const cssTemplate = options?.css?.map(e => `import '${e}'`).join('\n')

  const code = `/** Generated by Vixt */
// @ts-nocheck
import { createApp } from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import { routes } from 'vue-router/auto-routes'
import { setupLayouts } from 'virtual:generated-layouts'
import { createPinia } from 'pinia'
import { createPersistedState } from 'pinia-plugin-persistedstate'

import App from '@/App.vue'
${cssTemplate}

const pinia = createPinia()
pinia.use(createPersistedState())

const router = createRouter({
  routes: setupLayouts(routes),
  history: createWebHistory('${baseURL}'),
})

const app = createApp(App)
app.use(pinia).use(router)
// install all plugins under 'plugins/'
const plugins = import.meta.glob(${JSON.stringify(layersPluginsPath)}, { import: 'default', eager: true })
// @ts-ignore
Object.values(plugins).forEach((plugin) => typeof plugin === 'function' && plugin({ app, router, routes, pinia }))

app.mount('#${rootId}')
`

  fs.outputFileSync(path.resolve(rootDir!, buildDir!, 'main.ts'), code)
  return code
}

const name = 'vixt:entry-vue'
const defaults: AppOptions = {
  baseURL: '/',
  rootId: 'app',
  css: ['virtual:uno.css'],
}
export const entryVue = defineVixtModule<AppOptions>({
  meta: { name, configKey: 'app' },
  defaults,
  setup(options, vixt) {
    generateMainTs(options, vixt)
    return {
      name,
    }
  },
})

import type { Vixt } from '../types'

import path from 'pathe'
import fs from 'fs-extra'

import { defineVixtModule } from '../module'

// @ts-ignore
declare module '@vixt/core' {
  interface VixtOptions {
    app?: AppOptions
  }
}

type Property = Record<string, string>
export interface AppHead {
  meta?: Property[]
  link?: Property[]
  style?: Property[]
  script?: Property[]
  title?: Property[]
  noscript?: Property[]
}

export interface AppOptions {
  head?: AppHead
  /**
   * @default /
   */
  baseURL?: string
  /**
   * @default 'app'
   */
  rootId?: string
  /**
   * @default 'div'
   */
  rootTag?: string
  /** inject css files */
  css?: string[]
  /**
   * @default './loading.html'
   */
  loadingTemplate?: string
  /** transform main.ts */
  transformMain?: (code: string, vixt: Vixt) => string | undefined
}

function resolveHeadTag(tag: string, attrs: Record<string, string>) {
  const attrsStr = Object.entries(attrs).filter(([k]) => k !== 'children').map(([k, v]) => `${k}="${v}"`).join(' ')
  return attrs?.children ? `<${tag} ${attrsStr}>${attrs.children}</${tag}>` : `<${tag} ${attrsStr} />`
}

function generateIndexHtml(options: AppOptions, vixt: Vixt) {
  const { buildDir, buildDirName, rootDir } = vixt.options

  const indexHtmlPath = path.resolve(rootDir!, 'index.html')
  if (!fs.existsSync(indexHtmlPath))
    fs.outputFileSync(indexHtmlPath, `<!-- Generated by Vixt -->\n<!-- This file transform from '${buildDirName}/index.html' -->\n`)

  const { head = {}, rootTag, rootId } = options

  const headTemplate = (Object.entries(head) as [string, any[]][]).filter(([k]) => k !== 'noscript')
    .map(([tag, attrs]) => (attrs).map(e => resolveHeadTag(tag, e)))
    .flat()
    .join('\n')
  const noscriptTemplate = (Object.entries(head) as [string, any[]][]).filter(([k]) => k === 'noscript')
    .map(([tag, attrs]) => (attrs).map(e => resolveHeadTag(tag, e)))
    .flat()
    .join('\n')

  let { loadingTemplate = '' } = options
  if (!loadingTemplate) {
    for (const layer of vixt._layers) {
      const loadingTemplatePath = path.resolve(layer.cwd!, 'loading.html')
      if (fs.existsSync(loadingTemplatePath)) {
        loadingTemplate = fs.readFileSync(loadingTemplatePath, 'utf-8')
        break
      }
    }
  }

  const code = `<!DOCTYPE html>
<html>
  <head>
${headTemplate}
  </head>
  <body>
    <${rootTag} id="${rootId}">
${loadingTemplate}
    </${rootTag}>
    <script type="module" src="/src/main.ts"></script>
${noscriptTemplate}
  </body>
</html>
`
  fs.outputFileSync(path.resolve(buildDir!, 'index.html'), code)
  return code
}

function generateAppConfig(vixt: Vixt) {
  const { buildImportsDir, srcDir, srcDirName } = vixt.options
  let appConfigsImportTemplate = ''
  let appConfigsMergeTemplate = ''
  let i = 0
  for (const layer of vixt._layers) {
    const appConfigPath = path.resolve(layer.cwd!, srcDirName!, 'app.config.ts')
    if (fs.existsSync(appConfigPath)) {
      const appConfigName = `__app_config_${i}`
      appConfigsImportTemplate += `import ${appConfigName} from '${appConfigPath}'\n`
      appConfigsMergeTemplate += `${appConfigName}, `
      i++
    }
  }

  const appConfigTemplate = `
import { defu } from 'defu'
${appConfigsImportTemplate}
const appConfig = defu(${appConfigsMergeTemplate}{})
function useAppConfig() {
  return appConfig
} 
export { useAppConfig }
`
  // generate for auto-import
  const mainTsPath = path.resolve(srcDir!, 'main.ts')
  fs.outputFileSync(path.resolve(buildImportsDir!, `app.config.ts`), `// @ts-nocheck\nexport { useAppConfig } from '${mainTsPath}'`)
  return appConfigTemplate
}

function generatePlugins(vixt: Vixt) {
  const { srcDirName } = vixt.options
  let pluginsImportTemplate = ''
  let pluginsMergeTemplate = ''
  let i = 0
  for (const layer of [...vixt._layers].reverse()) {
    const pluginsDir = path.resolve(layer.cwd!, srcDirName!, 'plugins')
    const files = fs.existsSync(pluginsDir) ? fs.readdirSync(pluginsDir) : []
    for (const f of files) {
      const p = path.resolve(pluginsDir, f)
      const pluginName = `__plugin_${i}`
      pluginsImportTemplate += `import ${pluginName} from '${p}'\n`
      pluginsMergeTemplate += `${pluginName}, `
      i++
    }
  }

  const pluginsTemplate = `
${pluginsImportTemplate}
const plugins = [${pluginsMergeTemplate}]
function usePlugins(options) {
  Object.values(plugins).forEach((plugin) => typeof plugin === 'function' && plugin(options))
}
`
  return pluginsTemplate
}

function getAppComponentPath(vixt: Vixt) {
  const { srcDirName } = vixt.options
  for (const layer of vixt._layers) {
    const appComponentPath = path.resolve(layer.cwd!, srcDirName!, 'App.vue')
    if (fs.existsSync(appComponentPath))
      return appComponentPath
  }
}

function generateMainTs(options: AppOptions, vixt: Vixt) {
  const { buildDir, buildDirName, srcDir } = vixt.options

  const mainTsPath = path.resolve(srcDir!, 'main.ts')
  if (!fs.existsSync(mainTsPath))
    fs.outputFileSync(mainTsPath, `// Generated by Vixt\n// This file transform from '${buildDirName}/main.ts'\n`)

  const appComponentPath = getAppComponentPath(vixt) || '@vixt/core/client/App.vue'
  const appComponentTemplate = `import App from '${appComponentPath}'`
  const cssTemplate = options?.css?.map(css => `import '${css}'`).join('\n') ?? ''
  const appConfigTemplate = generateAppConfig(vixt)
  const pluginsTemplate = generatePlugins(vixt)

  let code = `// Generated by Vixt
// This file transform to 'src/main.ts'
// @ts-nocheck
${appComponentTemplate}
${cssTemplate}
${appConfigTemplate}
${pluginsTemplate}
`

  code = options.transformMain?.(code, vixt) || code

  fs.outputFileSync(path.resolve(buildDir!, 'main.ts'), code)
  return code
}

const name = 'vixt:app'
const defaults: AppOptions = {
  rootId: 'app',
  rootTag: 'div',
  baseURL: '/',
  css: [],
  head: {
    meta: [
      { charset: 'utf-8' },
      { name: 'viewport', content: 'width=device-width, initial-scale=1' },
    ],
  },
}
export const app = defineVixtModule<AppOptions>({
  meta: { name, configKey: 'app' },
  defaults,
  setup(options, vixt) {
    let indexHtmlCode: string
    let mainTsCode: string
    const mainTsPath = path.resolve(vixt.options.srcDir!, 'main.ts')
    return {
      name,
      configResolved() {
        indexHtmlCode = generateIndexHtml(options, vixt)
        mainTsCode = generateMainTs(options, vixt)
      },
      transformIndexHtml: {
        order: 'pre',
        handler() {
          return indexHtmlCode
        },
      },
      transform: {
        order: 'pre',
        handler(_, id) {
          if (id !== mainTsPath)
            return
          return mainTsCode
        },
      },
    }
  },
})

import type { Vixt } from '@vixt/core'
import type { AppOptions } from '@vixt/vue'

import { defineVixtModule } from '@vixt/core'
import { generateAppConfig, generateCss, generatePlugins } from '@vixt/vue'
import fs from 'fs-extra'
import path from 'pathe'

export function generateMainTs(options: AppOptions, vixt: Vixt) {
  const { buildDir, buildDirName } = vixt.options

  const mainTsPath = path.resolve('.vitepress/theme/index.ts')
  if (!fs.existsSync(mainTsPath))
    fs.outputFileSync(mainTsPath, `// Generated by Vixt\n// This file transform from '${buildDirName}/main.ts'\n`)

  const cssTemplate = generateCss(options)
  const appConfigTemplate = generateAppConfig(vixt)
  const pluginsTemplate = generatePlugins(vixt)

  const code = `// Generated by Vixt
// This file transform to '.vitepress/theme/index.ts'
// @ts-nocheck
${cssTemplate}
${appConfigTemplate}
${pluginsTemplate}

import 'uno.css'
import DefaultTheme from 'vitepress/theme'

export default {
  extends: DefaultTheme,
  enhanceApp(ctx) {
    usePlugins({ ...ctx, appConfig })
  },
}
`

  fs.outputFileSync(path.resolve(buildDir!, 'main.ts'), code)
  return code
}

const name = 'vixt:app'
const defaults: AppOptions = {
  css: [],
}
export const appVitepress = defineVixtModule<AppOptions>({
  meta: { name, configKey: 'app' },
  defaults,
  setup(options, vixt) {
    let mainTsCode: string
    const mainTsPath = path.resolve('.vitepress/theme/index.ts')
    return {
      name,
      configResolved() {
        mainTsCode = generateMainTs(options, vixt)
      },
      transform: {
        order: 'pre',
        handler(_, id) {
          if (id !== mainTsPath)
            return
          return mainTsCode
        },
      },
    }
  },
})

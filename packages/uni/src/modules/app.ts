import type { Vixt } from '@vixt/core'
import type { AppOptions } from '@vixt/vue'

import { defineVixtModule } from '@vixt/core'
import { genarateAppComponent, generateAppConfig, generateCss, generateIndexHtml, generatePlugins } from '@vixt/vue'
import fs from 'fs-extra'
import path from 'pathe'

export function generateMainTs(options: AppOptions, vixt: Vixt) {
  const { buildDir, srcDir } = vixt.options

  const mainTsPath = path.resolve(srcDir!, 'main.ts')
  if (!fs.existsSync(mainTsPath))
    fs.outputFileSync(mainTsPath, `// Generated by Vixt\n// This file transform from '${path.basename(buildDir!)}/main.ts'\n`)

  const appComponentTemplate = genarateAppComponent(vixt)
  const cssTemplate = generateCss(options)
  const appConfigTemplate = generateAppConfig(vixt)
  const pluginsTemplate = generatePlugins(vixt)

  const code = `// Generated by Vixt
// This file transform to '${srcDir}/main.ts'
// @ts-nocheck
${appComponentTemplate}
${cssTemplate}
${appConfigTemplate}
${pluginsTemplate}

import 'virtual:uno.css'
import { createSSRApp } from 'vue'
import * as Pinia from 'pinia'
import { createPersistedState } from 'pinia-plugin-persistedstate'
import { pages as routes } from 'virtual:uni-pages'

export function createApp() {
  const app = createSSRApp(App)
  const pinia = Pinia.createPinia()
  pinia.use(createPersistedState({
    storage: {
      getItem: uni.getStorageSync,
      setItem: uni.setStorageSync,
    },
    ...appConfig.piniaPersistedState,
  }))
  app.use(pinia)
  usePlugins({ app, routes, pinia, appConfig })
  
  return { app, Pinia }
}
`

  fs.outputFileSync(path.resolve(buildDir!, 'main.ts'), code)
  return code
}

const name = 'vixt:app'
const defaults: AppOptions = {
  rootId: 'app',
  rootTag: 'div',
  baseURL: '/',
  css: [],
  head: {
    meta: [
      { charset: 'utf-8' },
      { name: 'viewport', content: 'width=device-width, initial-scale=1' },
    ],
  },
}
export const appUni = defineVixtModule<AppOptions>({
  meta: { name, configKey: 'app' },
  defaults,
  setup(options, vixt) {
    let indexHtmlCode: string
    let mainTsCode: string
    const mainTsPath = path.resolve(vixt.options.srcDir!, 'main.ts')
    return {
      name,
      configResolved() {
        indexHtmlCode = generateIndexHtml(options, vixt)
        mainTsCode = generateMainTs(options, vixt)
      },
      transformIndexHtml: {
        order: 'pre',
        handler() {
          return indexHtmlCode
        },
      },
      transform: {
        order: 'pre',
        handler(_, id) {
          if (id !== mainTsPath)
            return
          return mainTsCode
        },
      },
    }
  },
})

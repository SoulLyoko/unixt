import type { AppOptions, Vixt, VixtConfigLayer } from '@vixt/core'

import path from 'pathe'
import fs from 'fs-extra'
import { defineVixtModule, resolveLayersDirs } from '@vixt/core'

function resolveLayersPlugins(layers: VixtConfigLayer[], from: string) {
  const { plugins = [] } = resolveLayersDirs(layers)
  return plugins.map((pluginPath) => {
    let pluginsDir = path.relative(from, pluginPath)
    if (!pluginPath.startsWith('.') && !pluginPath.startsWith('/')) {
      pluginsDir = `./${pluginsDir}`
    }
    return `${pluginsDir}/*.ts`
  })
}

function generateMainTs(options: AppOptions, vixt: Vixt) {
  const { buildDir, rootDir } = vixt.options
  const layersPluginsPath = resolveLayersPlugins(vixt._layers, path.resolve(rootDir!, 'src'))
  const cssTemplate = options?.css?.map(e => `import '${e}'`).join('\n')

  const code = `/** Generated by Vixt */
// @ts-nocheck
import { createSSRApp } from 'vue'
import * as Pinia from 'pinia'
import { createUnistorage } from 'pinia-plugin-unistorage'
import { pages } from 'virtual:uni-pages'

import App from '@/App.vue'
${cssTemplate}

export function createApp() {
  const app = createSSRApp(App)
  const pinia = Pinia.createPinia()
  pinia.use(createUnistorage())
  app.use(pinia)

  // install all plugins under 'plugins/'
  const plugins = import.meta.glob(${JSON.stringify(layersPluginsPath)}, { import: 'default', eager: true })
  // @ts-ignore
  Object.values(plugins).forEach((plugin) => typeof plugin === 'function' && plugin({ app, routes: pages, pinia }))
  return { app, Pinia }
}
`

  fs.outputFileSync(path.resolve(rootDir!, buildDir!, 'main.ts'), code)
  return code
}

const name = 'vixt:entry-uni'
export const entryUni = defineVixtModule<AppOptions>({
  meta: { name, configKey: 'app' },
  defaults: {
    css: ['virtual:uno.css'],
  },
  setup(options, vixt) {
    generateMainTs(options, vixt)
    return {
      name: 'vixt:entry-uni',
      enforce: 'pre',
      transform(code, id) {
        const { buildDir, rootDir } = vixt.options
        const mainPath = path.resolve(rootDir!, options.main!)
        if (id !== mainPath)
          return

        code = fs.readFileSync(path.resolve(rootDir!, buildDir!, 'main.ts'), 'utf-8')
        return code
      },
    }
  },
})
